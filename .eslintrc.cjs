/* eslint-env node */
require('@rushstack/eslint-patch/modern-module-resolution')

module.exports = {
  root: true,
  env: {
    commonjs: true,
    es6: true,
    node: true,
    jest: true,
  },
  extends: [
    'plugin:vue/vue3-essential',
    '@vue/eslint-config-typescript',
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 'latest',
    project: 'tsconfig.json',
    sourceType: 'module',
  },
  plugins: [
    '@typescript-eslint',
  ],
  overrides: [
    {
      files: [
        'src/**/*.test.ts',
        'src/**/*.test.tsx',
      ],
      rules: {
        '@typescript-eslint/unbound-method': 'off',
        '@typescript-eslint/no-unsafe-argument': 'off',
        '@typescript-eslint/no-unsafe-assignment': 'off',
        '@typescript-eslint/no-unsafe-call': 'off',
        '@typescript-eslint/no-unsafe-member-access': 'off',
        '@typescript-eslint/no-unsafe-return': 'off',
        '@typescript-eslint/no-var-requires': 'off',
      },
    },
  ],
  rules: {
    '@typescript-eslint/comma-dangle': ['error', { arrays: 'always-multiline', objects: 'always-multiline', exports: 'always-multiline', imports: 'always-multiline', functions: 'never', },],
    '@typescript-eslint/comma-spacing': ['error', {before: false, after: true, },],
    '@typescript-eslint/explicit-function-return-type': 'error',
    '@typescript-eslint/naming-convention': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-misused-promises': ['error', { 'checksVoidReturn': { 'attributes': false } }],
    '@typescript-eslint/no-non-null-assertion': 'off',
    '@typescript-eslint/no-unused-vars': ['error',],
    '@typescript-eslint/quotes': ['error', 'single', { allowTemplateLiterals: true, avoidEscape: true, },],
    '@typescript-eslint/restrict-template-expressions': 'off',
    '@typescript-eslint/space-infix-ops': 'error',
    '@typescript-eslint/type-annotation-spacing': 'error',
    'arrow-body-style': 'off',
    'array-bracket-spacing': ['error', 'always',],
    'arrow-spacing': 'error',
    'comma-dangle': ['error', {arrays: 'always-multiline', objects: 'always-multiline', exports: 'always-multiline', imports: 'always-multiline', functions: 'never', },],
    'comma-spacing': ['error', { before: false, after: true, }, ],
    'eol-last': ['error', 'always',],
    'func-style': ['error', 'expression',],
    'global-require': 'off',
    'import/no-import-module-exports': 'off',
    'import/prefer-default-export': 'off',
    indent: ['error', 2,],
    'key-spacing': ['error', { afterColon: true, },],
    'keyword-spacing': ['error', { before: true, after: true, },],
    'linebreak-style': ['error', 'unix',],
    'max-len': 'off',
    'no-await-in-loop': 'off',
    'no-console': ['warn', { allow: ['debug', 'info', 'error', 'warn',], },],
    'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 0, },],
    'no-multi-spaces': 'error',
    'no-restricted-syntax': ['error', 'FunctionExpression[generator=false]:not(:has(ThisExpression))', 'FunctionDeclaration[generator=false]:not(:has(ThisExpression))',],
    'no-trailing-spaces': 'error',
    'no-underscore-dangle': 'off',
    'no-unused-vars': 'off',
    'object-curly-newline': 'off',
    'object-curly-spacing': ['error', 'always',],
    'padded-blocks': ['error', 'never',],
    'prefer-arrow-callback': 'error',
    'quote-props': ['error', 'as-needed',],
    quotes: ['error', 'single', { allowTemplateLiterals: true, avoidEscape: true, },],
    'rest-spread-spacing': ['error', 'never',],
    semi: ['error', 'always',],
    'semi-spacing': 'error',
    'space-before-blocks': 'error',
    'space-before-function-paren': ["error", {
      "anonymous": "always",
      "named": "never",
      "asyncArrow": "always"
    }],
    'space-in-parens': ['error', 'never',],
    'space-infix-ops': 'off',
    'space-unary-ops': 'error',
    'wrap-iife': ['error', 'inside',],
  },
};
